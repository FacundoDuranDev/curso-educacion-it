-- Script de inicialización del esquema de Hive para PostgreSQL
-- Se ejecuta automáticamente al iniciar PostgreSQL

-- Crear base de datos metastore si no existe
CREATE DATABASE IF NOT EXISTS metastore;

-- Conectar a la base de datos metastore
\c metastore;

-- Crear tabla VERSION
CREATE TABLE IF NOT EXISTS "VERSION" (
    "VER_ID" BIGINT NOT NULL,
    "SCHEMA_VERSION" VARCHAR(127) NOT NULL,
    "VERSION_COMMENT" VARCHAR(255)
);

-- Crear tabla DBS
CREATE TABLE IF NOT EXISTS "DBS" (
    "DB_ID" BIGINT NOT NULL,
    "DESC" VARCHAR(4000),
    "DB_LOCATION_URI" VARCHAR(4000) NOT NULL,
    "NAME" VARCHAR(128) UNIQUE,
    "OWNER_NAME" VARCHAR(128),
    "OWNER_TYPE" VARCHAR(10)
);

-- Crear tabla TBLS
CREATE TABLE IF NOT EXISTS "TBLS" (
    "TBL_ID" BIGINT NOT NULL,
    "CREATE_TIME" INTEGER NOT NULL,
    "DB_ID" BIGINT,
    "LAST_ACCESS_TIME" INTEGER NOT NULL,
    "OWNER" VARCHAR(767),
    "RETENTION" INTEGER NOT NULL,
    "SD_ID" BIGINT,
    "TBL_NAME" VARCHAR(128),
    "TBL_TYPE" VARCHAR(128),
    "VIEW_EXPANDED_TEXT" TEXT,
    "VIEW_ORIGINAL_TEXT" TEXT
);

-- Crear tabla SDS
CREATE TABLE IF NOT EXISTS "SDS" (
    "SD_ID" BIGINT NOT NULL,
    "CD_ID" BIGINT,
    "INPUT_FORMAT" VARCHAR(4000),
    "IS_COMPRESSED" BOOLEAN NOT NULL,
    "IS_STOREDASSUBDIRECTORIES" BOOLEAN NOT NULL,
    "LOCATION" VARCHAR(4000),
    "NUM_BUCKETS" INTEGER NOT NULL,
    "OUTPUT_FORMAT" VARCHAR(4000),
    "SERDE_ID" BIGINT
);

-- Crear tabla COLUMNS_V2
CREATE TABLE IF NOT EXISTS "COLUMNS_V2" (
    "CD_ID" BIGINT NOT NULL,
    "COMMENT" VARCHAR(256),
    "COLUMN_NAME" VARCHAR(767) NOT NULL,
    "TYPE_NAME" VARCHAR(4000),
    "INTEGER_IDX" INTEGER NOT NULL
);

-- Crear tabla SERDES
CREATE TABLE IF NOT EXISTS "SERDES" (
    "SERDE_ID" BIGINT NOT NULL,
    "NAME" VARCHAR(128),
    "SLIB" VARCHAR(4000)
);

-- Crear tabla SERDE_PARAMS
CREATE TABLE IF NOT EXISTS "SERDE_PARAMS" (
    "SERDE_ID" BIGINT NOT NULL,
    "PARAM_KEY" VARCHAR(256) NOT NULL,
    "PARAM_VALUE" TEXT
);

-- Crear tabla TABLE_PARAMS
CREATE TABLE IF NOT EXISTS "TABLE_PARAMS" (
    "TBL_ID" BIGINT NOT NULL,
    "PARAM_KEY" VARCHAR(256) NOT NULL,
    "PARAM_VALUE" TEXT
);

-- Crear tabla PARTITIONS
CREATE TABLE IF NOT EXISTS "PARTITIONS" (
    "PART_ID" BIGINT NOT NULL,
    "CREATE_TIME" INTEGER NOT NULL,
    "LAST_ACCESS_TIME" INTEGER NOT NULL,
    "PART_NAME" VARCHAR(767),
    "SD_ID" BIGINT,
    "TBL_ID" BIGINT
);

-- Crear tabla PARTITION_KEYS
CREATE TABLE IF NOT EXISTS "PARTITION_KEYS" (
    "TBL_ID" BIGINT NOT NULL,
    "PKEY_COMMENT" VARCHAR(4000),
    "PKEY_NAME" VARCHAR(128) NOT NULL,
    "PKEY_TYPE" VARCHAR(767) NOT NULL,
    "INTEGER_IDX" INTEGER NOT NULL
);

-- Crear tabla PARTITION_KEY_VALS
CREATE TABLE IF NOT EXISTS "PARTITION_KEY_VALS" (
    "PART_ID" BIGINT NOT NULL,
    "PART_KEY_VAL" VARCHAR(256),
    "INTEGER_IDX" INTEGER NOT NULL
);

-- Crear tabla PARTITION_PARAMS
CREATE TABLE IF NOT EXISTS "PARTITION_PARAMS" (
    "PART_ID" BIGINT NOT NULL,
    "PARAM_KEY" VARCHAR(256) NOT NULL,
    "PARAM_VALUE" TEXT
);

-- Crear tabla INDEX_PARAMS
CREATE TABLE IF NOT EXISTS "INDEX_PARAMS" (
    "INDEX_ID" BIGINT NOT NULL,
    "PARAM_KEY" VARCHAR(256) NOT NULL,
    "PARAM_VALUE" TEXT
);

-- Crear tabla INDEXES
CREATE TABLE IF NOT EXISTS "INDEXES" (
    "INDEX_ID" BIGINT NOT NULL,
    "CREATE_TIME" INTEGER NOT NULL,
    "DEFERRED_REBUILD" BOOLEAN NOT NULL,
    "INDEX_HANDLER_CLASS" VARCHAR(4000),
    "INDEX_NAME" VARCHAR(128),
    "INDEX_TBL_ID" BIGINT,
    "LAST_ACCESS_TIME" INTEGER NOT NULL,
    "ORIG_TBL_ID" BIGINT,
    "SD_ID" BIGINT
);

-- Crear tabla BUCKETING_COLS
CREATE TABLE IF NOT EXISTS "BUCKETING_COLS" (
    "SD_ID" BIGINT NOT NULL,
    "BUCKET_COL_NAME" VARCHAR(256),
    "INTEGER_IDX" INTEGER NOT NULL
);

-- Crear tabla SORT_COLS
CREATE TABLE IF NOT EXISTS "SORT_COLS" (
    "SD_ID" BIGINT NOT NULL,
    "COLUMN_NAME" VARCHAR(128),
    "ORDER" INTEGER NOT NULL,
    "INTEGER_IDX" INTEGER NOT NULL
);

-- Crear tabla DATABASE_PARAMS
CREATE TABLE IF NOT EXISTS "DATABASE_PARAMS" (
    "DB_ID" BIGINT NOT NULL,
    "PARAM_KEY" VARCHAR(180) NOT NULL,
    "PARAM_VALUE" TEXT
);

-- Crear tabla ROLES
CREATE TABLE IF NOT EXISTS "ROLES" (
    "ROLE_ID" BIGINT NOT NULL,
    "CREATE_TIME" INTEGER NOT NULL,
    "OWNER_NAME" VARCHAR(128),
    "ROLE_NAME" VARCHAR(128) UNIQUE
);

-- Crear tabla ROLE_MAP
CREATE TABLE IF NOT EXISTS "ROLE_MAP" (
    "ROLE_GRANT_ID" BIGINT NOT NULL,
    "ADD_TIME" INTEGER NOT NULL,
    "GRANT_OPTION" INTEGER NOT NULL,
    "GRANTOR" VARCHAR(128),
    "GRANTOR_TYPE" VARCHAR(128),
    "PRINCIPAL_NAME" VARCHAR(128),
    "PRINCIPAL_TYPE" VARCHAR(128),
    "ROLE_ID" BIGINT
);

-- Crear tabla GLOBAL_PRIVS
CREATE TABLE IF NOT EXISTS "GLOBAL_PRIVS" (
    "USER_GRANT_ID" BIGINT NOT NULL,
    "CREATE_TIME" INTEGER NOT NULL,
    "GRANT_OPTION" INTEGER,
    "PRIVILEGE" VARCHAR(128),
    "USER_ID" BIGINT
);

-- Crear tabla DB_PRIVS
CREATE TABLE IF NOT EXISTS "DB_PRIVS" (
    "DB_GRANT_ID" BIGINT NOT NULL,
    "CREATE_TIME" INTEGER NOT NULL,
    "DB_ID" BIGINT,
    "GRANT_OPTION" INTEGER NOT NULL,
    "GRANTOR" VARCHAR(128),
    "GRANTOR_TYPE" VARCHAR(128),
    "PRINCIPAL_NAME" VARCHAR(128),
    "PRINCIPAL_TYPE" VARCHAR(128),
    "DB_PRIV" VARCHAR(128)
);

-- Crear tabla TBL_PRIVS
CREATE TABLE IF NOT EXISTS "TBL_PRIVS" (
    "TBL_GRANT_ID" BIGINT NOT NULL,
    "CREATE_TIME" INTEGER NOT NULL,
    "GRANT_OPTION" INTEGER NOT NULL,
    "GRANTOR" VARCHAR(128),
    "GRANTOR_TYPE" VARCHAR(128),
    "PRINCIPAL_NAME" VARCHAR(128),
    "PRINCIPAL_TYPE" VARCHAR(128),
    "TBL_PRIV" VARCHAR(128),
    "TBL_ID" BIGINT
);

-- Crear tabla TBL_COL_PRIVS
CREATE TABLE IF NOT EXISTS "TBL_COL_PRIVS" (
    "TBL_COLUMN_GRANT_ID" BIGINT NOT NULL,
    "COLUMN_NAME" VARCHAR(128),
    "CREATE_TIME" INTEGER NOT NULL,
    "GRANT_OPTION" INTEGER NOT NULL,
    "GRANTOR" VARCHAR(128),
    "GRANTOR_TYPE" VARCHAR(128),
    "PRINCIPAL_NAME" VARCHAR(128),
    "PRINCIPAL_TYPE" VARCHAR(128),
    "TBL_COL_PRIV" VARCHAR(128),
    "TBL_ID" BIGINT
);

-- Crear tabla PART_PRIVS
CREATE TABLE IF NOT EXISTS "PART_PRIVS" (
    "PART_GRANT_ID" BIGINT NOT NULL,
    "CREATE_TIME" INTEGER NOT NULL,
    "GRANT_OPTION" INTEGER NOT NULL,
    "GRANTOR" VARCHAR(128),
    "GRANTOR_TYPE" VARCHAR(128),
    "PART_ID" BIGINT,
    "PRINCIPAL_NAME" VARCHAR(128),
    "PRINCIPAL_TYPE" VARCHAR(128),
    "PART_PRIV" VARCHAR(128)
);

-- Crear tabla PART_COL_PRIVS
CREATE TABLE IF NOT EXISTS "PART_COL_PRIVS" (
    "PART_COLUMN_GRANT_ID" BIGINT NOT NULL,
    "COLUMN_NAME" VARCHAR(128),
    "CREATE_TIME" INTEGER NOT NULL,
    "GRANT_OPTION" INTEGER NOT NULL,
    "GRANTOR" VARCHAR(128),
    "GRANTOR_TYPE" VARCHAR(128),
    "PART_ID" BIGINT,
    "PRINCIPAL_NAME" VARCHAR(128),
    "PRINCIPAL_TYPE" VARCHAR(128),
    "PART_COL_PRIV" VARCHAR(128)
);

-- Crear tabla FUNCS
CREATE TABLE IF NOT EXISTS "FUNCS" (
    "FUNC_ID" BIGINT NOT NULL,
    "CLASS_NAME" VARCHAR(4000),
    "CREATE_TIME" INTEGER NOT NULL,
    "DB_ID" BIGINT,
    "FUNC_NAME" VARCHAR(128),
    "FUNC_TYPE" INTEGER NOT NULL,
    "OWNER_NAME" VARCHAR(128),
    "OWNER_TYPE" VARCHAR(10)
);

-- Crear tabla FUNC_RU
CREATE TABLE IF NOT EXISTS "FUNC_RU" (
    "FUNC_ID" BIGINT NOT NULL,
    "RESOURCE_TYPE" INTEGER NOT NULL,
    "RESOURCE_URI" VARCHAR(4000),
    "INTEGER_IDX" INTEGER NOT NULL
);

-- Crear secuencias para los IDs
CREATE SEQUENCE IF NOT EXISTS "DBS_SEQ" START WITH 1;
CREATE SEQUENCE IF NOT EXISTS "TBLS_SEQ" START WITH 1;
CREATE SEQUENCE IF NOT EXISTS "SDS_SEQ" START WITH 1;
CREATE SEQUENCE IF NOT EXISTS "COLUMNS_V2_SEQ" START WITH 1;
CREATE SEQUENCE IF NOT EXISTS "SERDES_SEQ" START WITH 1;
CREATE SEQUENCE IF NOT EXISTS "PARTITIONS_SEQ" START WITH 1;
CREATE SEQUENCE IF NOT EXISTS "INDEXES_SEQ" START WITH 1;
CREATE SEQUENCE IF NOT EXISTS "ROLES_SEQ" START WITH 1;
CREATE SEQUENCE IF NOT EXISTS "FUNCS_SEQ" START WITH 1;

-- Insertar versión inicial solo si no existe
INSERT INTO "VERSION" ("VER_ID", "SCHEMA_VERSION", "VERSION_COMMENT")
VALUES (1, '3.1.3', 'Hive release version 3.1.3')
ON CONFLICT ("VER_ID") DO NOTHING;

-- Dar permisos al usuario admin
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO admin;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO admin;
GRANT ALL PRIVILEGES ON SCHEMA public TO admin;

-- Verificar que las tablas se crearon
\dt 